openapi: 3.0.3
info:
  title: 注文検索API
  description: 注文テーブルからデータを検索するためのAPI
  version: 1.0.0
  contact:
    name: API Support
    email: api-support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.example.com/v1
    description: 本番環境
  - url: https://staging-api.example.com/v1
    description: ステージング環境
  - url: http://localhost:3000/v1
    description: 開発環境

paths:
  /orders:
    get:
      summary: 注文一覧取得
      description: 検索条件に基づいて注文一覧を取得します
      operationId: searchOrders
      tags:
        - Orders
      parameters:
        - name: user_id
          in: query
          description: 購入者ID
          schema:
            type: integer
            format: int64
            example: 123
        - name: status
          in: query
          description: 注文状態
          schema:
            type: string
            enum: [pending, paid, shipped, canceled]
            example: paid
        - name: payment_method
          in: query
          description: 支払い方法
          schema:
            type: string
            example: credit_card
        - name: order_date_from
          in: query
          description: 注文日時の開始日（YYYY-MM-DD形式）
          schema:
            type: string
            format: date
            example: "2024-01-01"
        - name: order_date_to
          in: query
          description: 注文日時の終了日（YYYY-MM-DD形式）
          schema:
            type: string
            format: date
            example: "2024-12-31"
        - name: min_amount
          in: query
          description: 最小合計金額
          schema:
            type: number
            format: decimal
            minimum: 0
            example: 1000.00
        - name: max_amount
          in: query
          description: 最大合計金額
          schema:
            type: number
            format: decimal
            minimum: 0
            example: 50000.00
        - name: page
          in: query
          description: ページ番号（1から開始）
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: limit
          in: query
          description: 1ページあたりの取得件数
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
            example: 20
        - name: sort
          in: query
          description: ソート項目
          schema:
            type: string
            enum: [order_date, total_amount, created_at]
            default: order_date
        - name: order
          in: query
          description: ソート順序
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: 検索成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /orders/{order_id}:
    get:
      summary: 注文詳細取得
      description: 指定されたIDの注文詳細を取得します
      operationId: getOrderById
      tags:
        - Orders
      parameters:
        - name: order_id
          in: path
          required: true
          description: 注文ID
          schema:
            type: integer
            format: int64
            example: 1001
      responses:
        '200':
          description: 取得成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Order'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /orders/users/{user_id}:
    get:
      summary: ユーザー別注文一覧取得
      description: 指定されたユーザーの注文一覧を取得します
      operationId: getOrdersByUserId
      tags:
        - Orders
      parameters:
        - name: user_id
          in: path
          required: true
          description: 購入者ID
          schema:
            type: integer
            format: int64
            example: 123
        - name: status
          in: query
          description: 注文状態フィルター
          schema:
            type: string
            enum: [pending, paid, shipped, canceled]
        - name: page
          in: query
          description: ページ番号
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: 1ページあたりの取得件数
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: 取得成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    Order:
      type: object
      description: 注文情報
      properties:
        order_id:
          type: integer
          format: int64
          description: 注文ID
          example: 1001
        user_id:
          type: integer
          format: int64
          description: 購入者ID
          example: 123
        order_date:
          type: string
          format: date-time
          description: 注文日時
          example: "2024-08-21T10:30:00Z"
        total_amount:
          type: number
          format: decimal
          description: 合計金額
          example: 15999.99
        status:
          type: string
          description: 状態
          enum: [pending, paid, shipped, canceled]
          example: paid
        payment_method:
          type: string
          description: 支払い方法
          example: credit_card
        shipping_address_id:
          type: integer
          format: int64
          description: 配送先ID
          nullable: true
          example: 456
        note:
          type: string
          description: 購入者メモ
          nullable: true
          example: "配送時間指定: 午前中"
        created_at:
          type: string
          format: date-time
          description: 作成日時
          example: "2024-08-21T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: 更新日時
          example: "2024-08-21T11:15:00Z"
      required:
        - order_id
        - user_id
        - order_date
        - total_amount
        - status
        - created_at
        - updated_at

    Pagination:
      type: object
      description: ページネーション情報
      properties:
        current_page:
          type: integer
          description: 現在のページ番号
          example: 1
        total_pages:
          type: integer
          description: 総ページ数
          example: 10
        total_count:
          type: integer
          description: 総件数
          example: 195
        limit:
          type: integer
          description: 1ページあたりの件数
          example: 20
        has_next:
          type: boolean
          description: 次のページが存在するか
          example: true
        has_prev:
          type: boolean
          description: 前のページが存在するか
          example: false
      required:
        - current_page
        - total_pages
        - total_count
        - limit
        - has_next
        - has_prev

    Error:
      type: object
      description: エラー情報
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
              description: エラーコード
              example: "INVALID_PARAMETER"
            message:
              type: string
              description: エラーメッセージ
              example: "指定されたパラメータが無効です"
            details:
              type: string
              description: エラー詳細
              nullable: true
              example: "user_idは正の整数である必要があります"
          required:
            - code
            - message
      required:
        - success
        - error

  responses:
    BadRequest:
      description: リクエストパラメータが不正
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: "BAD_REQUEST"
              message: "リクエストパラメータが不正です"
              details: "pageは1以上の整数である必要があります"

    Unauthorized:
      description: 認証が必要
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: "UNAUTHORIZED"
              message: "認証が必要です"

    NotFound:
      description: リソースが見つからない
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: "NOT_FOUND"
              message: "指定されたリソースが見つかりません"

    InternalServerError:
      description: サーバー内部エラー
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: "INTERNAL_SERVER_ERROR"
              message: "サーバー内部エラーが発生しました"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWTトークンによる認証

security:
  - BearerAuth: []

tags:
  - name: Orders
    description: 注文関連のAPI